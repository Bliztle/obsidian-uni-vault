{"path":"4. semester/CAOS/attachments/Pasted image 20240410112144.png","text":"// the information xv6 tracks about each process // including its register context and state struct proc { char *mem; // Start of process memory uint sz; // Size of process memory char *kstack; // Bottom of kernel stack // for this process enum proc state state; // Process state int på; I // Process 1D struct proc *parent; // Parent process void *chan; // If non-zero, sleeping on chan int killed; // If non-zero, have been killed struct file *ofile[NOFILE]; // ØØJs struct inode *cwd; // Current directory struct context context; // Switch here to run process struct trapframe *tf; // Trap frame for the // current interrupt ) // the registers xv6 will save and restore // to stop and subsequently restart a process struct context int eip; i // Index pointer register int esp; // Stack pointer register int ebx; // Called the base register int ecx; // Called the counter register int edx; // Called the data register int esi; // Source index register int edi; // Destination index register int ebp; // Stack base pointer register UE // the different states a process can be in enum PFØG state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE );","libVersion":"0.3.2","langs":"dan+eng"}