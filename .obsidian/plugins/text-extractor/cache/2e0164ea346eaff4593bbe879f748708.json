{"path":"4. semester/CAOS/attachments/Pasted image 20240530163616.png","text":"(a) An array of structs (b) The clear1 function 1 #define N 1000 1 void clearl(point *p, int n) 2 2 4 3 typedef struct { 3 int 4, J; 4 int vel[3]; 1 5 int ace[3]; 5 for (i = 0; i < n; i++) £ 6 ) point; 6 for (j = 0; j < 3; je») 7 7 plil.vellj] = 0; & point pIN); s for (5 = 0; j < 3; je» 9 pli].ace[j] = 0; 10 > \"3 (c) The clear2 function (d) The clear3 function 1 void clear2(point *p, int n) 1 void clear3(point *p, int n) 24 24 3 int i, J; 3 int 1, J; 4 4 5 for (1 = 0; i < ; i+ € 5 for (j =0; j < 3; §+0) € 6 for (j =0; j < 3; je) £ 6 for (i = 0; i < n; i++) 7 plil.vellj] = 0; 7 pli].vel[j] = 0; 8 pli].ace[j] = 0; 8 for (i = 0; i < n; i++) . > . pli].acclj] = 0; 10 på 10 på n } \" 3 Figure 6.20 Code examples for Practice Problem 6.8. Practice Problem 6.8 (solution page 699) The three functions in Figure 6.20 perform the same operation with varying de- grees of spatial locality. Rank-order the functions with respect to the spatial local- ity enjoyed by cach. Explain how you arrived at your ranking.","libVersion":"0.3.2","langs":"dan+eng"}