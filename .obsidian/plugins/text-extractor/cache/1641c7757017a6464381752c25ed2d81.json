{"path":"4. semester/CAOS/attachments/Pasted image 20240430200944.png","text":"1 int done = 0; 2 pthread mutex t m = PTHREAD MUTEX INITIALIZER; 3 pthread cond Â£ c - PTHREAD COND INITIALIZER; s void thr exit () ( . Pthread_mutex_lock (sm) ; 7 done = 1; , Pthread_cond_signal (&c); . Pthread mutex unlock (&m); ) h vold +child(void sarg) ( i Pprintf(\"child\\n\"); h thr exit (); s return NULL; e ) is void thr_join() ( o Pthread_mutex_lock (sm) ; M while (done == 0) N Pthread_cond_wait (sc, &m); S Pthread mutex unlock (sm); s ) ]s int main(int arge, char sargv[]) { e printf(\"parent: begin\\n\"); H pthread t p; N Pthread create (sp, NULL, child, NULL); N thr_join(); o printf(\"parent: end\\n\"); o return 0; e ) Figure 30.3: Parent Waiting For Child: Use A Condition Variable","libVersion":"0.3.2","langs":"dan+eng"}