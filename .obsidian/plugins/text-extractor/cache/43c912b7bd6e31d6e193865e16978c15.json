{"path":"4. semester/CAOS/attachments/Pasted image 20240417113939.png","text":"6. Challenge 12: In your Dat4/SW4 project work (developing your FATAL (FAnTAstic Language) compiler/interpreter, you decide to implement the symbol-table using a hash-table because you heard it should often be a good approach. You recall from your previous course in algorithms and data-structures, that you with a good hash function you can insert, look-up, delete elements in average O(1) time (worst case O(n)). Looking further into hash-tables you find that you can handle collisions in different ways. E.g, 1. separate chaining in a linked list for each bucket, 2. separate chaining in an (dynamic) array for each bucket, 3. open addressing (closed hashing) with linear probing (look up the terms if you don't recall them), 4. open addressing (closed hashing) with quadratic probing . Analyze the behavior of these approaches for collision handling from a memory hierarchy and locality perspective, and try to rank them. Which may be preferable to achieve fastest actual runtime? Under what workload assumptions and use patterns will you get the fastest runtime?","libVersion":"0.3.2","langs":"dan+eng"}