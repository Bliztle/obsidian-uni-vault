{"path":"4. semester/CAOS/attachments/Pasted image 20240430205809.png","text":"1 typedef struct _ Zem_t [ 2 int value; 2 pthread cond t cond; . pthread mutex t lock; s ) Zem_t; 7 // only one thread can call this s void Zem init(Zem t +s, int value) ( , s->value = value; w Cond_tnit (ss->cond) ; u Mutex_init (&s->lock); ) u vold Zem wait(Zem t +s) | 5 Mutex_lock (&s->lock) ; … while (s->value <= 0) v Cond wait (ss->cond, &s->lock); 5 s->value--; ” Mutex unlock (&s->lock); » ) » vold Zem post (Zem t +s) ( F Mutex_lock (&s->lock) ; 2 s->valuert; på Cond_signal (ss->cond) ; % Mutex_unlock (&s->lock); ) Figure 31.17: Implementing Zemaphores With Locks And CVs","libVersion":"0.3.2","langs":"dan+eng"}