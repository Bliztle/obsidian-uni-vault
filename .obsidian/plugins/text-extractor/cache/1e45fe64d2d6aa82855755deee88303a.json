{"path":"4. semester/SPO/attachments/Pasted image 20240319212008.png","text":"Fig. 54 Type checking a Checkprogran (Program) = case Program of program Funs | frable = Getrns(Funs) Checkrns(Funs.ftable) if lookup(ftable, main) 2 (int) + int then error0) Getruns(Funs) = case Funs of Fun (f.1) = Getpun(Fun) bind(emptytable, f.1) Fun Funs | (f,1) = Getpun(Fun) frable = Getruns(Funs) if lookup(fiable. f) = unbound then bind(ftable. f.1) else error0); fiable Getrur(Fun) = case Fun of Typeld (Typelds) = Exp | (f,10) = Getrypera(Typeld) 11 4i] = Getppes(Typelds) (f. (1+ +Mn) — t) Getrypes(Typelds) = case Typelds of Typeld ‘ (x.1) = Getrpea(Typeld) [ål Typeld Typelds | (x1.11) = Getrpea(Typeld) (2 t) = Getrypes(Typelds) [~ Checkrws(Funs fiable) = case Funs of Fun | Checkr(Fun.ftable) Fun Funs | Checkryj(Fun, ftable) Checkruns(Funs,ftable)","libVersion":"0.3.2","langs":"dan+eng"}