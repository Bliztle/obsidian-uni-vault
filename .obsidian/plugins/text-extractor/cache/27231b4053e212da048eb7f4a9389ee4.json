{"path":"4. semester/CAOS/attachments/Pasted image 20240430205340.png","text":"1 typedef struct rwlock t ( 2 — semt lock; // binary semaphore (basic lock) s sem_t writelock; // allow ONE writer/MANY readers s — int readers; // freaders in critical section s ) rwlock t; 7 vold rwlock init(rwlock t srw) ( s rw->readers = 0; 9 — sem init (sru->lock, 0, 1); 10 sem init(sru->writelock, 0, 1); t 1 vold rwlock acquire readlock(rwlock t +rw) ( u — sem_watt (arw->lock); s rw->readers++; i — if (rw->readers == 1) // first reader gets writelock 7 sem wait (sru->writelock); is — sem post (sru->1ock); » 3 ; void rwlock release readlock(rwlock t +ruw) ( = — sem wait (&ru->10ck); s — rw->readers--; = — if (rw->readers == 0) // last reader lets it go S sem post (&ru->writelock); 2 — sem_post (sru->1ock); 7 t » void rwlock acquire writelock(rwlock t +ru) { 0 — sem wait (arw->writelock); s t n void rwlock release writelock(rwlock t +ru) { = sem_post (sru->writelock); s Figure 31.13: A Simple Reader-Writer Lock","libVersion":"0.3.2","langs":"dan+eng"}