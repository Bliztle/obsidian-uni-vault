{"path":"4. semester/SPO/attachments/Pasted image 20240228224424.png","text":"Some of the parser (in a functional language) fun parseS’() = (+ check lookahead LA(S’ -> S $) = {a,b,$ ] + if next = ’a’ or next = ’b’ or next = ’§’ then print(\"0\"); parseS(); match('$?); (+ follow production *) else error(\"unacceptable input in rule S’ -> S $: \" ” next) and parseS() = (+ check lookahead LA(S -> AB) = {a,b,$ ] *) if next = ’a’ or next = ’b’ or next = '$? then print(\"1\"); parseA(); parseB(); (+ follow production *) else error(\"unacceptable input in rule S -> AB $: \" = next) and parseA() = (+ branch on lookahead LA(A -> aAb) = fa) +) if next = ’a’ then print(\"2\"); match(’a’); parseA(); match(’b’); (+ branch on lookahead la(A -> ¢) = {b, $ } %) else if next = 'b? or next = ’$’ then print(\"3\"); else error(\"unacceptable input in rule S -> aAb | e: \" ” next) next is a function that gives us the next input symbol. match matches the current input symbol and the argument.","libVersion":"0.3.2","langs":"dan+eng"}