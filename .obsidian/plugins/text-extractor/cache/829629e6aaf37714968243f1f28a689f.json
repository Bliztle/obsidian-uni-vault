{"path":"4. semester/CAOS/attachments/Pasted image 20240409171142.png","text":"Linux/x86-64 Faults and Aborts Divide error. A divide error (exception 0) occurs when an application attempts to divide by zero or when the result of a divide instruction is too big for the destination operand. Unix does not attempt to recover from divide errors, opting instead to abort the program. Linux shells typically report divide errors as \"Floating exceptions.” General protection fault. The infamous general protection fault (exception 13) occurs for many reasons, usually because a program references an unde- fined area of virtual memory or because the program attempts to write toa read-only text segment. Linux does not attempt to recover from this fault. Linux shells typically report general protection faults as \"Segmentation faults” Page fault. A page fault (exception 14) is an example of an exception where the faulting instruction is restarted. The handler maps the appropriate page of virtual memory on disk into a page of physical memory and then restarts the faulting instruction. We will see how page faults work in detail in Chapter 9. Machine check. A machine check (exception 18) occurs as a result of a fatal hardware error that is detected during the execution of the faulting in- struction. Machine check handlers never return control to the application program.","libVersion":"0.3.2","langs":"dan+eng"}