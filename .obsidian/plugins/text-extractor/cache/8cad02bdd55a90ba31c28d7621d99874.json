{"path":"4. semester/CAOS/attachments/Pasted image 20240501114805.png","text":"Challenge 14: Therac 25 \"theuraputic machine\" The Therac 25 therapeutic radiation machine killed several people and injured even more in the 1980'es. When the case was investigated by independent software safety researcher Nancy Leveson, she found several eritical software flaws in the system, including several race-conditions. The machine supports various kinds of treatment and treatment parameters, but we will focus on two: + Treatment A where a high dose is given to a big area (wide-beam) + Treatment B where a lower dose is to be given to a focused area (narrow beam) The radiation beam width is controlled by bending magnets whose position is controlled by the machine. Deaths or injuries occurred because the machine gave a high dose to a highly focused area. The code below attempts to present a code-sketch that mimics how one of these race-conditions could emerge. Can you spot it? There is a secondary problem related to detection of errors in the machine. Can you spot it? The real system was programmed in assembly, no threads package, and switching between the “threads” in interrupts handlers\". The race-condition we seek here is not caused by simple preemption in a test-set update, so you may disregard those.","libVersion":"0.3.2","langs":"dan+eng"}