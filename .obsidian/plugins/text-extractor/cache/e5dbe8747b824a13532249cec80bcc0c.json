{"path":"4. semester/CAOS/attachments/Pasted image 20240430202836.png","text":"1 int buffer[MAX]; 2 int fill ptr = 0; 3 int use ptr =0; 4 int count = 0; 5 s void put(int value) { 7 buffer[fill ptr] - value; s fillptr = (fill ptr + 1) % MAX; . count++; » ) n u int get() ( 6 int tmp - buffer[use ptr]; u use ptr = (use ptr + 1) % MAX; 5 count--; 1 return tmp; v ) Figure 30.13: The Correct Put And Get Routines 1 cond t empty, fill; 2 mutex t mutex; s 4 void sproducer (void sarg) ( 5 int i; s for (i = 0; i < loops; i++) I 7 Pthread mutex lock(åmutex) ; // på s while (count == MAX) // p2 . Pthread cond wait (sempty, &mutex); // p3 \" put (); // på n Pthread_cond_signal (&fill); // p5 v Pthread_mutex_unlock (&mutex); // p6 1 ) u ) 5 16 void +consumer(void s+arg) ( v int i; \" for (i = 0; i < loops; i++) I ” Pthread mutex lock(åmutex) ; // el » while (count == 0) // c2 F Pthread cond wait (4fi11, &mutex); // c3 2 int tmp = get (); // ca » Pthread cond signal(&empty); // c5 x Pthread mutex unlock(&mutex); // c6 3 printf(\"sd\\n\", tmp); % ) z ) Figure 30.14: The Correct Producer/Consumer Synchronization","libVersion":"0.3.2","langs":"dan+eng"}