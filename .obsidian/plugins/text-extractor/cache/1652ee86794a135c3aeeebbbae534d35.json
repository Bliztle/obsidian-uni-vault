{"path":"4. semester/SPO/attachments/Pasted image 20240313163818.png","text":"Callzw(Fun, args. flable) = case Fun of Typeld ( Typelds ) = Exp | (f.t0) = Getryperg(Typeld) viable = Bindtype1as(Typelds, args) v = Bvalgg(Exp, vtable.ftable) if vi is of type 19 shen v Getnye(Typeld) = case Typeld of intid | (gemame(id), int) bool id | (gemamelid), bool) Bindryp;(Typelds, args) â€” case (Typelds, args) of (Typeld. (x,t) = Getpypera(Typeld) b if visoftyper then bind(emptytable,x,v) else error() (Typeld , Typelds, | (x,1) = Getzypeia( Typeld) (v: 78)) viable = Bindrsperss(Typelds, vs) if lookup(viable.x) = unbound and vis of type I then bind(vtable,x.v) else error() - ] error() Fig. 4.3 Evaluating a function call","libVersion":"0.3.2","langs":"dan+eng"}